Задание 1
Вставьте в ответ код программы, в которой реализована функция work(n), на вход которой подается положительное целое число n, где n больше 5 и меньше 100. В этой функции последовательно:
Создайте первый список простых чисел, которые больше 2 и меньше n.
Создайте второй список простых чисел, которые больше 199 и меньше 501.
В конец первого списка встаньте элементы второго списка.
Удалите элемент с индексом 20 из обновленного первого списка.
Функция work(n) должна с помощью return возвращать  сумму элементов обновленного первого списка с индексами 14 и 30.
Простое число – натуральное (целое положительное) число, имеющее ровно два различных натуральных делителя: единицу и самого себя.

Пример:
print(work(7))
>>> 660
print(work(17))
>>> 630
---------------------------------------------------------------------------------------------

Задание 2
Вставьте в ответ код программы, в которой реализована функция my_set(n), на вход которой подается положительное целое число n. В этой функции:
Создайте исходное множество, содержащее все целые положительные числа, меньшие n.
Из значений исходного множества отберите те, которые делятся на 2 нацело, и поместите их во множество set_1.
Из значений исходного множества отберите те, которые делятся на 4 нацело, и поместите их во множество set_2.
Функция my_set(n) должна с помощью return возвращать сумму элементов разности множеств set_1 и set_2.

Пример:
print(my_set(19))
>>> 50
print(my_set(63))
>>> 512
---------------------------------------------------------------------------------------------

Задание 3
Написать функцию farm(animal), на вход которой подается вид животного animal. В этой функции реализовать:
Создание словаря farm1, в котором информация о пяти различных обитателях фермы1: ключ = вид животного, значение = список, содержащий возраст животного (количество месяцев) и его массу тела (кг):
‘корова’: [11, 250],
‘курица’: [5, 2],
‘свинья’: [12, 100],
‘гусь’: [8, 5],
‘лошадь’: [18, 400].
Создание словаря farm2, в котором информация о пяти различных обитателях фермы2: ключ = вид животного, значение = список, содержащий возраст животного (количество месяцев) и его массу тела (кг):
‘корова’: [13, 230],
‘курица’: [5, 3],
‘свинья’: [11, 90],
‘гусь’: [9, 5],
‘индюк’: [10, 8].
Функция farm(animal) должна выбирать из имеющихся на ферме1 и ферме2 наиболее молодое животное вида animal и возвращать с помощью return массу его тела. Если на обеих фермах животное имеет один и тот же возраст, то возвращать следует среднее арифметическое от масс этого вида животного на обеих фермах.

Пример:
print(farm('курица'))
>>> 2.5
print(farm('корова'))
>>> 250
---------------------------------------------------------------------------------------------

Задание 4
Вставьте в ответ код программы с реализацией функции check_generator(),  в которой:
Написать однострочный генератор списков, который с помощью функции ascii_letters() из модуля string и функции choice из модуля random, создает список mas_gen из 1000 случайных пятибуквенных строк. После с помощью функции getsizeof() из модуля sys получить объём памяти который занимает mas_gen и сохранить его в переменную mem1.
Используя yield, написать генератор, реализующий аналогичную mas_gen последовательность строк. Поочерёдно сгенерировать два элемента. С помощью функции getsizeof() получить объём памяти, который занимает второй сгенерированный элемент и сохранить его в переменную mem2.
Сравнить объем памяти, выделяемый под этот список и под генератор. Функция check_generator() должна с помощью return вывести разность mem1 и mem2.

---------------------------------------------------------------------------------------------

Задание 5
Вставьте в ответ код программы с реализацией функции function(n), на вход которой подается положительное целое число n (n >100)  в которой:
n – последний целочисленный элемент списка [1, 2, 3, …, n].
С помощью функции filter из списка [1, 2, 3, …, n] отобрать все числа, которые нацело делятся на семь, и из них составить список list_1. С помощью функции map создать список list_2, содержащий квадраты каждого числа из списка list_1. Используя функцию zip, получить список кортежей list_3 (число из list_1, квадрат этого числа из list_2).
Функция function(n) должна с помощью return возвратить сумму всех чисел в list_3.

Пример
print(function(1000))
>>> 47333286
print(function(200))
>>> 380828
---------------------------------------------------------------------------------------------